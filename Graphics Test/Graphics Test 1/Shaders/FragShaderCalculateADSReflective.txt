#version 400

in vec3 worldSpaceNormal;
in vec3 vertexWorldPosition; 
in vec2 vertexUV;
out vec4 FragColor;

uniform float power;
uniform vec3 ambientLight;
uniform vec3 lightPosition;
uniform vec3 cameraPosition;
uniform vec4 diffuseLight;
uniform vec4 specularColor;
uniform vec4 ambientColor;
uniform vec4 diffuseColor;
uniform sampler2D baseTex;
uniform sampler2D overlayTex;
uniform sampler2D discardTex;
uniform samplerCube cubeMapTex;

void main()
{ 
	//Ambient

	//Diffuse
	//dot of normal and light
	vec3 lightVector = normalize(lightPosition - vertexWorldPosition);
	float diffuseBrightness = dot(normalize(worldSpaceNormal), lightVector);
	diffuseBrightness = clamp(diffuseBrightness,0,1);
	vec4 diffuseLight = vec4(diffuseBrightness * diffuseLight.x,diffuseBrightness * diffuseLight.y,diffuseBrightness * diffuseLight.z,diffuseColor.w);
	
	
	//Specular
	//dot product of the reflection of the light around the normal and the eye position
	vec3 lightReflectedVector = reflect(-lightVector,worldSpaceNormal);
	vec3 cameraVector = normalize(cameraPosition-vertexWorldPosition);
	float specularBrightness = dot(cameraVector,lightReflectedVector);
	specularBrightness = clamp(specularBrightness,0,1);
	specularBrightness = pow(specularBrightness,power);
	

	float eta = 1.5;
	vec3 reflectDirection = reflect(-cameraVector,worldSpaceNormal);
	vec3 refractDirection = refract(-cameraVector,worldSpaceNormal,eta);
	float percentReflected = 0.5;
	FragColor = mix(texture(cubeMapTex,refractDirection),texture(cubeMapTex,reflectDirection),percentReflected);
	//FragColor = (vec4(ambientLight,1) * ambientColor * vertexColor) + (diffuseLight * diffuseColor *  vertexColor) + (specularBrightness * specularColor);
	
}


